<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace ：命名空间，用于隔离sql语句，对sql进行分类化管理。 -->
<mapper namespace="test">
	<!-- 在映射文件中有很多sql语句 -->
	<!-- 通过select语句执行数据库查询，
		id：标识映射文件中的sql，
		将来sql语句封装到mappedstatement对象中，所以将id 称为statement的id
		#{}表示一个占位符
		parameterType：指定输入参数的类型，这里指定int型
		#{id}：其中的id表示接收输入的参数，参数名称是id，如果输入的参数是简单类型，#{}中的参数名可以任意，可以id，value
		resultType：指定slq输出结果所映射的java对象类型
	 -->
	 
	<select id="findUserById" parameterType="int" resultType="cn.itcast.mybatis.po.User">
		select * from `user` WHERE id = #{value}
	</select>
	
	<!--
	 ${}表示要接收的sql串
	 ${value}：其表示接收输入的参数，如果输入的参数是简单类型，${}中的参数名只可以是value
	 -->
	<select id="findUserByName" parameterType="java.lang.String" resultType="cn.itcast.mybatis.po.User">
		select * from `user` WHERE username like '%${value}%'
	</select>
	
	<!-- 添加用户 -->
	<insert id="insertUser" parameterType="cn.itcast.mybatis.po.User">
	
	<!-- keyProperty 将查询到主键值设置到resultType指定的对象的哪个属性
		resultType指定LAST_INSERT_ID的结果类型-->
		
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select LAST_INSERT_ID()
		</selectKey>
	
		insert into user(username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address})
	</insert>
	
	<!-- 删除用户信息 -->
	<delete id="deleteUser" parameterType="java.lang.Integer" >
		delete from user where id = #{id}
	</delete>
	
	<!-- 更新用户信息 -->
	<update id="updateUser" parameterType="cn.itcast.mybatis.po.User" >
		update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id = #{id}
	</update>
	

</mapper>